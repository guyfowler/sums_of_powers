/*----------------------------------------------------------------------------------
************************************************************************************
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
PARI scripts for the proof of Proposition 7.6 in
"Some uniform effective results on AndrÃ©--Oort for sums of powers in $\mathbb{C}^n$"
Guy Fowler
30 April 2024
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
************************************************************************************

Contents

    Scripts on discriminants

        discs(n)

    Scripts for 2-elementary and almost 2-elementary discriminants

        rho_two(n)
        disc_is_two_elem(n)
        disc_is_almost_two_elem(n)
        two_elem_discs(v)
        almost_two_elem_discs(v)
        find_all_exceptional_pairs(n, k)

    Saved output

        ListExceptionalPairs

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
******************************************************************
-----------------------------------------------------------------*/




/*-----------------------------
******************************
Scripts on discriminants
*******************************
------------------------------*/


/*-------------------------------------------------------------------
discs(n)

Input: integer n>0
Output: the list of all discriminants Delta with abs(Delta) \leq n 
-------------------------------------------------------------------*/

discs(n)={
    my(u, k, r, l, v, m, D);
    u=[];

    if(type(n)!="t_INT", print("Input error"); return);
    if(n<=0, print("Input error"); return);

    k=floor(n/4);
    r=n%4;

    if(r==3, l=2*k+1, l=2*k);

    v=vector(l, i, 0);

    for(i=1, k,
    
    m=2*i;
    D=-4*i;

   v[m]=D;
   v[m-1]=D+1
    
    );

    if(v[l]==0, v[l]=1-4*(k+1));

    return(v);
}


/*------------------------------------------------------------
**************************************************************
Scripts for 2-elementary and almost 2-elementary discriminants
**************************************************************
-------------------------------------------------------------*/


/*------------------------------------------------------------------------
rho_two(n)

Input: integer n<0 s.t. n \equiv 0, 1 mod 4
Output: the value of the function rho_two applied to the class group of discriminant n 
---------------------------------------------------------------------------*/


rho_two(n)={
my(a, w);

if(n>=0, print("Input error"); return);
if(n%4!=0&&n%4!=1, print("Input error"); return); 

w=omega(n);

if(n%16==4, a=w-2);

if(n%4==1, a=w-1);

if(n%16==8, a=w-1);

if(n%16==12, a=w-1);

if(n%32==16, a=w-1);

if(n%32==0, a=w);

return(a);

}

/*-------------------------------------------------------------------------
disc_is_two_elem(n)

Input: integer n<0 s.t. n \equiv 0, 1 mod 4
Output: 1 if n is a 2-elementary discriminant; 0 if n is not a 2-elementary discriminant
--------------------------------------------------------------------------*/

disc_is_two_elem(n)={
    my(r, a, h);

    if(n>=0, print("Input error"); return);
if(n%4!=0&&n%4!=1, print("Input error"); return); 

    r=rho_two(n);

    a=2^r;

    h=qfbclassno(n);

    if(a==h,return(1),return(0));
}

/*----------------------------------------------------------------------------
disc_is_almost_two_elem

Input: integer n<0 s.t. n \equiv 0, 1 mod 4
Output: 1 if n is an almost 2-elementary discriminant; 0 if n is not an almost 2-elementary discriminant
------------------------------------------------------------------------------*/

disc_is_almost_two_elem(n)={
    my(r, a, h);

    if(n>=0, print("Input error"));
if(n%4!=0&&n%4!=1, print("Input error"));

    r=rho_two(n);

    a=2^(r+1);

    h=qfbclassno(n);

    if(a%h==0,return(1),return(0));
}

/*-------------------------------------------------------------------------
two_elem_discs(v)

Input: vector v whose entries are all integers n<0 s.t. n \equiv 0, 1 mod 4
Output: vector u whose entries are precisely those entries n of v which are 2-elementary discriminants
--------------------------------------------------------------------------*/

two_elem_discs(v)={
my(l, u);

l=length(v);
u=[];

for(i=1, l,

if(v[i]>=0, print("Input error"); break(2));
if(v[i]%4!=0&&v[i]%4!=1, print("Input error"); break(2)); 

if(disc_is_two_elem(v[i])==1, u=concat(u, v[i]));

);

return(u);


}

/*-------------------------------------------------------------------------
almost_two_elem_discs(v)

Input: vector v whose entries are all integers n<0 s.t. n \equiv 0, 1 mod 4
Output: vector u whose entries are precisely those entries n of v which are almost 2-elementary discriminants
--------------------------------------------------------------------------*/

almost_two_elem_discs(v)={
my(l, u);

l=length(v);
u=[];

for(i=1, l,

if(v[i]>=0, print("Input error"); break(2));
if(v[i]%4!=0&&v[i]%4!=1, print("Input error"); break(2)); 

if(disc_is_almost_two_elem(v[i])==1, u=concat(u, v[i]));

);

return(u);


}

/*-----------------------------------------------------------------------------
find_all_exceptional_pairs(n, k)

Input: integers n, k>0
Output: list of all pairs (Delta_x, Delta_y) of discriminants Delta_x, Delta_y satisfying (7.1) with abs(Delta_x), abs(Delta_y) \leq n and h(Delta_x), h(Delta_y) \leq k
-------------------------------------------------------------------------------*/

find_all_exceptional_pairs(n, k)={
my(u, v, l, w, m, Delta_y, h_y, D_y, Delta_x, D_x, h_x, p_x, p_y );

u=[];

if(type(n)!="t_INT", print("Input error"); return);
    if(n<=0, print("Input error"); return);

    if(type(k)!="t_INT", print("Input error"); return);
    if(k<=0, print("Input error"); return);

v=discs(n);
v=almost_two_elem_discs(v);
l=length(v);

w=two_elem_discs(v);
m=length(w);

for(i=1, l,

Delta_y=v[i];
h_y = qfbclassno(Delta_y);
if(h_y>k, next());
D_y = quaddisc(Delta_y);

for(j=1, m,

Delta_x = w[j];

if(Delta_x==Delta_y, next());

D_x = quaddisc(Delta_x);

if(D_x==D_y, next());

h_x=qfbclassno(Delta_x);

if(h_y!=2*h_x, next());
if(h_x==1, u=concat(u, [[Delta_x, Delta_y]]));

p_x=polclass(Delta_x);
p_y=polclass(Delta_y);

if(nfisincl(p_x, p_y)!=0, u=concat(u, [[Delta_x, Delta_y]]), next());


);
);

return(u);
}



/*-------------------------------------
**************************************
Saved Output
**************************************
-------------------------------------*/

/*-----------------------------------------------------------------
List of all pairs (Delta_x, Delta_y) satisfying (7.1)

May be obtained by running: find_all_exceptional_pairs(166147, 32)
Running time: approx 40 mins, stack size required 32000000
----------------------------------------------------------------*/

ListExceptionalPairs=[[-3, -15], [-4, -15], [-7, -15], [-8, -15], [-11, -15], [-12, -15], [-16, -15], [-19, -15], [-27, -15], [-28, -15], [-43, -15], [-67, -15], [-163, -15], [-3, -20], [-4, -20], [-7, -20], [-8, -20], [-11, -20], [-12, -20], [-16, -20], [-19, -20], [-27, -20], [-28, -20], [-43, -20], [-67, -20], [-163, -20], [-3, -24], [-4, -24], [-7, -24], [-8, -24], [-11, -24], [-12, -24], [-16, -24], [-19, -24], [-27, -24], [-28, -24], [-43, -24], [-67, -24], [-163, -24], [-3, -32], [-4, -32], [-7, -32], [-11, -32], [-12, -32], [-16, -32], [-19, -32], [-27, -32], [-28, -32], [-43, -32], [-67, -32], [-163, -32], [-3, -35], [-4, -35], [-7, -35], [-8, -35], [-11, -35], [-12, -35], [-16, -35], [-19, -35], [-27, -35], [-28, -35], [-43, -35], [-67, -35], [-163, -35], [-3, -36], [-7, -36], [-8, -36], [-11, -36], [-12, -36], [-19, -36], [-27, -36], [-28, -36], [-43, -36], [-67, -36], [-163, -36], [-52, -39], [-91, -39], [-403, -39], [-3, -40], [-4, -40], [-7, -40], [-8, -40], [-11, -40], [-12, -40], [-16, -40], [-19, -40], [-27, -40], [-28, -40], [-43, -40], [-67, -40], [-163, -40], [-4, -48], [-7, -48], [-8, -48], [-11, -48], [-16, -48], [-19, -48], [-28, -48], [-43, -48], [-67, -48], [-163, -48], [-3, -51], [-4, -51], [-7, -51], [-8, -51], [-11, -51], [-12, -51], [-16, -51], [-19, -51], [-27, -51], [-28, -51], [-43, -51], [-67, -51], [-163, -51], [-3, -52], [-4, -52], [-7, -52], [-8, -52], [-11, -52], [-12, -52], [-16, -52], [-19, -52], [-27, -52], [-28, -52], [-43, -52], [-67, -52], [-163, -52], [-15, -55], [-20, -55], [-35, -55], [-40, -55], [-60, -55], [-75, -55], [-100, -55], [-115, -55], [-235, -55], [-24, -56], [-32, -56], [-64, -56], [-88, -56], [-3, -60], [-4, -60], [-7, -60], [-8, -60], [-11, -60], [-12, -60], [-16, -60], [-19, -60], [-27, -60], [-28, -60], [-43, -60], [-67, -60], [-163, -60], [-147, -63], [-3, -64], [-7, -64], [-8, -64], [-11, -64], [-12, -64], [-19, -64], [-27, -64], [-28, -64], [-43, -64], [-67, -64], [-163, -64], [-51, -68], [-187, -68], [-3, -72], [-4, -72], [-7, -72], [-11, -72], [-12, -72], [-16, -72], [-19, -72], [-27, -72], [-28, -72], [-43, -72], [-67, -72], [-163, -72], [-4, -75], [-7, -75], [-8, -75], [-11, -75], [-16, -75], [-19, -75], [-28, -75], [-43, -75], [-67, -75], [-163, -75], [-15, -80], [-35, -80], [-40, -80], [-60, -80], [-75, -80], [-100, -80], [-115, -80], [-235, -80], [-36, -84], [-48, -84], [-112, -84], [-147, -84], [-3, -88], [-4, -88], [-7, -88], [-8, -88], [-11, -88], [-12, -88], [-16, -88], [-19, -88], [-27, -88], [-28, -88], [-43, -88], [-67, -88], [-163, -88], [-3, -91], [-4, -91], [-7, -91], [-8, -91], [-11, -91], [-12, -91], [-16, -91], [-19, -91], [-27, -91], [-28, -91], [-43, -91], [-67, -91], [-163, -91], [-32, -96], [-36, -96], [-48, -96], [-64, -96], [-72, -96], [-88, -96], [-3, -99], [-4, -99], [-7, -99], [-8, -99], [-12, -99], [-16, -99], [-19, -99], [-27, -99], [-28, -99], [-43, -99], [-67, -99], [-163, -99], [-3, -100], [-7, -100], [-8, -100], [-11, -100], [-12, -100], [-19, -100], [-27, -100], [-28, -100], [-43, -100], [-67, -100], [-163, -100], [-3, -112], [-4, -112], [-8, -112], [-11, -112], [-12, -112], [-16, -112], [-19, -112], [-27, -112], [-43, -112], [-67, -112], [-163, -112], [-3, -115], [-4, -115], [-7, -115], [-8, -115], [-11, -115], [-12, -115], [-16, -115], [-19, -115], [-27, -115], [-28, -115], [-43, -115], [-67, -115], [-163, -115], [-15, -120], [-20, -120], [-24, -120], [-32, -120], [-35, -120], [-40, -120], [-60, -120], [-64, -120], [-75, -120], [-88, -120], [-100, -120], [-115, -120], [-235, -120], [-3, -123], [-4, -123], [-7, -123], [-8, -123], [-11, -123], [-12, -123], [-16, -123], [-19, -123], [-27, -123], [-28, -123], [-43, -123], [-67, -123], [-163, -123], [-24, -128], [-64, -128], [-88, -128], [-36, -132], [-48, -132], [-99, -132], [-51, -136], [-187, -136], [-48, -144], [-4, -147], [-7, -147], [-8, -147], [-11, -147], [-16, -147], [-19, -147], [-28, -147], [-43, -147], [-67, -147], [-163, -147], [-3, -148], [-4, -148], [-7, -148], [-8, -148], [-11, -148], [-12, -148], [-16, -148], [-19, -148], [-27, -148], [-28, -148], [-43, -148], [-67, -148], [-163, -148], [-15, -155], [-20, -155], [-35, -155], [-40, -155], [-60, -155], [-75, -155], [-100, -155], [-115, -155], [-235, -155], [-52, -156], [-91, -156], [-403, -156], [-15, -160], [-20, -160], [-24, -160], [-32, -160], [-35, -160], [-60, -160], [-64, -160], [-75, -160], [-88, -160], [-100, -160], [-115, -160], [-235, -160], [-72, -168], [-147, -168], [-15, -180], [-35, -180], [-36, -180], [-40, -180], [-48, -180], [-60, -180], [-75, -180], [-100, -180], [-115, -180], [-235, -180], [-24, -184], [-32, -184], [-64, -184], [-88, -184], [-3, -187], [-4, -187], [-7, -187], [-8, -187], [-11, -187], [-12, -187], [-16, -187], [-19, -187], [-27, -187], [-28, -187], [-43, -187], [-67, -187], [-163, -187], [-24, -192], [-32, -192], [-36, -192], [-64, -192], [-72, -192], [-88, -192], [-15, -195], [-20, -195], [-35, -195], [-40, -195], [-52, -195], [-60, -195], [-75, -195], [-91, -195], [-100, -195], [-115, -195], [-235, -195], [-403, -195], [-112, -196], [-232, -203], [-91, -208], [-403, -208], [-15, -220], [-20, -220], [-35, -220], [-40, -220], [-60, -220], [-75, -220], [-100, -220], [-115, -220], [-235, -220], [-448, -224], [-36, -228], [-48, -228], [-3, -232], [-4, -232], [-7, -232], [-8, -232], [-11, -232], [-12, -232], [-16, -232], [-19, -232], [-27, -232], [-28, -232], [-43, -232], [-67, -232], [-163, -232], [-3, -235], [-4, -235], [-7, -235], [-8, -235], [-11, -235], [-12, -235], [-16, -235], [-19, -235], [-27, -235], [-28, -235], [-43, -235], [-67, -235], [-163, -235], [-20, -240], [-35, -240], [-36, -240], [-40, -240], [-48, -240], [-75, -240], [-100, -240], [-115, -240], [-235, -240], [-147, -252], [-24, -256], [-32, -256], [-88, -256], [-148, -259], [-195, -260], [-520, -260], [-715, -260], [-3, -267], [-4, -267], [-7, -267], [-8, -267], [-11, -267], [-12, -267], [-16, -267], [-19, -267], [-27, -267], [-28, -267], [-43, -267], [-67, -267], [-163, -267], [-15, -275], [-20, -275], [-35, -275], [-40, -275], [-60, -275], [-75, -275], [-100, -275], [-115, -275], [-235, -275], [-15, -280], [-20, -280], [-24, -280], [-32, -280], [-35, -280], [-40, -280], [-60, -280], [-64, -280], [-75, -280], [-88, -280], [-100, -280], [-115, -280], [-235, -280], [-24, -288], [-36, -288], [-48, -288], [-64, -288], [-88, -288], [-24, -312], [-32, -312], [-52, -312], [-64, -312], [-88, -312], [-91, -312], [-403, -312], [-15, -315], [-20, -315], [-40, -315], [-60, -315], [-75, -315], [-100, -315], [-115, -315], [-147, -315], [-235, -315], [-120, -320], [-160, -320], [-280, -320], [-760, -320], [-51, -323], [-187, -323], [-123, -328], [-15, -340], [-20, -340], [-35, -340], [-40, -340], [-51, -340], [-60, -340], [-75, -340], [-100, -340], [-115, -340], [-187, -340], [-235, -340], [-24, -352], [-32, -352], [-64, -352], [-15, -355], [-20, -355], [-35, -355], [-40, -355], [-60, -355], [-75, -355], [-100, -355], [-115, -355], [-235, -355], [-99, -363], [-36, -372], [-48, -372], [-192, -384], [-288, -384], [-15, -400], [-20, -400], [-35, -400], [-40, -400], [-60, -400], [-75, -400], [-115, -400], [-235, -400], [-3, -403], [-4, -403], [-7, -403], [-8, -403], [-11, -403], [-12, -403], [-16, -403], [-19, -403], [-27, -403], [-28, -403], [-43, -403], [-67, -403], [-163, -403], [-24, -408], [-32, -408], [-51, -408], [-64, -408], [-88, -408], [-187, -408], [-84, -420], [-180, -420], [-240, -420], [-315, -420], [-3, -427], [-4, -427], [-7, -427], [-8, -427], [-11, -427], [-12, -427], [-16, -427], [-19, -427], [-27, -427], [-28, -427], [-43, -427], [-67, -427], [-163, -427], [-15, -435], [-20, -435], [-35, -435], [-40, -435], [-60, -435], [-75, -435], [-100, -435], [-115, -435], [-232, -435], [-235, -435], [-24, -448], [-32, -448], [-64, -448], [-88, -448], [-15, -475], [-20, -475], [-35, -475], [-40, -475], [-60, -475], [-75, -475], [-100, -475], [-115, -475], [-235, -475], [-96, -480], [-160, -480], [-180, -480], [-192, -480], [-240, -480], [-280, -480], [-288, -480], [-760, -480], [-147, -483], [-52, -507], [-91, -507], [-403, -507], [-15, -520], [-20, -520], [-35, -520], [-40, -520], [-52, -520], [-60, -520], [-75, -520], [-91, -520], [-100, -520], [-115, -520], [-235, -520], [-403, -520], [-112, -532], [-408, -544], [-15, -555], [-20, -555], [-35, -555], [-40, -555], [-60, -555], [-75, -555], [-100, -555], [-115, -555], [-148, -555], [-235, -555], [-24, -568], [-32, -568], [-64, -568], [-88, -568], [-96, -576], [-192, -576], [-288, -576], [-435, -580], [-15, -595], [-20, -595], [-35, -595], [-40, -595], [-51, -595], [-60, -595], [-75, -595], [-100, -595], [-115, -595], [-187, -595], [-235, -595], [-120, -600], [-160, -600], [-280, -600], [-760, -600], [-99, -627], [-120, -640], [-280, -640], [-760, -640], [-132, -660], [-180, -660], [-240, -660], [-232, -667], [-84, -672], [-96, -672], [-192, -672], [-288, -672], [-448, -672], [-36, -708], [-48, -708], [-15, -715], [-20, -715], [-35, -715], [-40, -715], [-52, -715], [-60, -715], [-75, -715], [-91, -715], [-100, -715], [-115, -715], [-235, -715], [-403, -715], [-240, -720], [-15, -760], [-20, -760], [-24, -760], [-32, -760], [-35, -760], [-40, -760], [-60, -760], [-64, -760], [-75, -760], [-88, -760], [-100, -760], [-115, -760], [-235, -760], [-96, -768], [-288, -768], [-15, -795], [-20, -795], [-35, -795], [-40, -795], [-60, -795], [-75, -795], [-100, -795], [-115, -795], [-235, -795], [-1435, -820], [-312, -832], [-168, -840], [-315, -840], [-180, -900], [-240, -900], [-24, -928], [-32, -928], [-64, -928], [-88, -928], [-408, -952], [-15, -955], [-20, -955], [-35, -955], [-40, -955], [-60, -955], [-75, -955], [-100, -955], [-115, -955], [-235, -955], [-96, -960], [-120, -960], [-160, -960], [-180, -960], [-192, -960], [-280, -960], [-288, -960], [-760, -960], [-51, -1003], [-187, -1003], [-84, -1008], [-52, -1027], [-91, -1027], [-403, -1027], [-795, -1060], [-84, -1092], [-120, -1120], [-160, -1120], [-448, -1120], [-760, -1120], [-96, -1152], [-192, -1152], [-315, -1155], [-120, -1240], [-160, -1240], [-280, -1240], [-760, -1240], [-96, -1248], [-192, -1248], [-288, -1248], [-340, -1275], [-595, -1275], [-672, -1344], [-595, -1360], [-180, -1380], [-240, -1380], [-51, -1411], [-187, -1411], [-84, -1428], [-15, -1435], [-20, -1435], [-35, -1435], [-40, -1435], [-60, -1435], [-75, -1435], [-100, -1435], [-115, -1435], [-123, -1435], [-235, -1435], [-480, -1440], [-960, -1440], [-15, -1555], [-20, -1555], [-35, -1555], [-40, -1555], [-60, -1555], [-75, -1555], [-100, -1555], [-115, -1555], [-235, -1555], [-2080, -1560], [-120, -1600], [-160, -1600], [-280, -1600], [-760, -1600], [-96, -1632], [-192, -1632], [-288, -1632], [-960, -1920], [-315, -1995], [-672, -2016], [-555, -2035], [-120, -2080], [-160, -2080], [-195, -2080], [-280, -2080], [-312, -2080], [-715, -2080], [-760, -2080], [-420, -2100], [-195, -2275], [-520, -2275], [-715, -2275], [-312, -2392], [-480, -2400], [-960, -2400], [-1248, -2496], [-435, -2755], [-480, -2880], [-960, -2880], [-120, -3040], [-160, -3040], [-280, -3040], [-195, -3315], [-340, -3315], [-520, -3315], [-595, -3315], [-715, -3315], [-420, -3360], [-480, -3360], [-672, -3360], [-960, -3360], [-1120, -3360], [-2080, -3640], [-480, -3840], [-672, -4032], [-3315, -4420], [-480, -5280], [-660, -5280], [-960, -5280], [-420, -5460], [-1092, -5460], [-3360, -6720], [-672, -7392], [-3360, -10080], [-5280, -10560]];
